/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DashboardRouteRouteImport } from './routes/_dashboard/route'
import { Route as AuthRouteRouteImport } from './routes/_auth/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardTasksRouteImport } from './routes/_dashboard/tasks'
import { Route as DashboardMessageRouteImport } from './routes/_dashboard/message'
import { Route as DashboardEmployeeRouteImport } from './routes/_dashboard/employee'
import { Route as DashboardDashboardRouteImport } from './routes/_dashboard/dashboard'
import { Route as AuthRegisterRouteImport } from './routes/_auth/register'
import { Route as AuthOtpVerifyRouteImport } from './routes/_auth/otp-verify'
import { Route as AuthLoginRouteImport } from './routes/_auth/login'

const DashboardRouteRoute = DashboardRouteRouteImport.update({
  id: '/_dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardTasksRoute = DashboardTasksRouteImport.update({
  id: '/tasks',
  path: '/tasks',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardMessageRoute = DashboardMessageRouteImport.update({
  id: '/message',
  path: '/message',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardEmployeeRoute = DashboardEmployeeRouteImport.update({
  id: '/employee',
  path: '/employee',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardDashboardRoute = DashboardDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthOtpVerifyRoute = AuthOtpVerifyRouteImport.update({
  id: '/otp-verify',
  path: '/otp-verify',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof AuthLoginRoute
  '/otp-verify': typeof AuthOtpVerifyRoute
  '/register': typeof AuthRegisterRoute
  '/dashboard': typeof DashboardDashboardRoute
  '/employee': typeof DashboardEmployeeRoute
  '/message': typeof DashboardMessageRoute
  '/tasks': typeof DashboardTasksRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof AuthLoginRoute
  '/otp-verify': typeof AuthOtpVerifyRoute
  '/register': typeof AuthRegisterRoute
  '/dashboard': typeof DashboardDashboardRoute
  '/employee': typeof DashboardEmployeeRoute
  '/message': typeof DashboardMessageRoute
  '/tasks': typeof DashboardTasksRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteRouteWithChildren
  '/_dashboard': typeof DashboardRouteRouteWithChildren
  '/_auth/login': typeof AuthLoginRoute
  '/_auth/otp-verify': typeof AuthOtpVerifyRoute
  '/_auth/register': typeof AuthRegisterRoute
  '/_dashboard/dashboard': typeof DashboardDashboardRoute
  '/_dashboard/employee': typeof DashboardEmployeeRoute
  '/_dashboard/message': typeof DashboardMessageRoute
  '/_dashboard/tasks': typeof DashboardTasksRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/otp-verify'
    | '/register'
    | '/dashboard'
    | '/employee'
    | '/message'
    | '/tasks'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/otp-verify'
    | '/register'
    | '/dashboard'
    | '/employee'
    | '/message'
    | '/tasks'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/_dashboard'
    | '/_auth/login'
    | '/_auth/otp-verify'
    | '/_auth/register'
    | '/_dashboard/dashboard'
    | '/_dashboard/employee'
    | '/_dashboard/message'
    | '/_dashboard/tasks'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_dashboard': {
      id: '/_dashboard'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DashboardRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_dashboard/tasks': {
      id: '/_dashboard/tasks'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof DashboardTasksRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/_dashboard/message': {
      id: '/_dashboard/message'
      path: '/message'
      fullPath: '/message'
      preLoaderRoute: typeof DashboardMessageRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/_dashboard/employee': {
      id: '/_dashboard/employee'
      path: '/employee'
      fullPath: '/employee'
      preLoaderRoute: typeof DashboardEmployeeRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/_dashboard/dashboard': {
      id: '/_dashboard/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardDashboardRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/_auth/register': {
      id: '/_auth/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_auth/otp-verify': {
      id: '/_auth/otp-verify'
      path: '/otp-verify'
      fullPath: '/otp-verify'
      preLoaderRoute: typeof AuthOtpVerifyRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthRouteRoute
    }
  }
}

interface AuthRouteRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
  AuthOtpVerifyRoute: typeof AuthOtpVerifyRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
  AuthOtpVerifyRoute: AuthOtpVerifyRoute,
  AuthRegisterRoute: AuthRegisterRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface DashboardRouteRouteChildren {
  DashboardDashboardRoute: typeof DashboardDashboardRoute
  DashboardEmployeeRoute: typeof DashboardEmployeeRoute
  DashboardMessageRoute: typeof DashboardMessageRoute
  DashboardTasksRoute: typeof DashboardTasksRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardDashboardRoute: DashboardDashboardRoute,
  DashboardEmployeeRoute: DashboardEmployeeRoute,
  DashboardMessageRoute: DashboardMessageRoute,
  DashboardTasksRoute: DashboardTasksRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
